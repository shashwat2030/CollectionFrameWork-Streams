Java Collection framework:
Q->What is Collection?
Ans: A collection is simply an object that represents a group of objects known as its elements.
Q->What is Collection Framework?
Ans: It provides a set of interfaces and classes that help in managing groups of object.
Note before jdk 2 i.e. in 1.2 rely on Stack ,Arrays, Hash-table, Vectors.
Drawbacks:
Inconsistency: Different management of collection lead to steep learning curve.
Lack of inter-operability: Not designed to work together.
No-Common-Interface: Simply it means can't implement the generic algorithms operate on different algorithms.
These problems solved by the collection framework and reason behind its introduction in java version 2.
Advantages:
Unified Architecture: Consistent set of interface for all collections.
Inter-Operability: Collections uniform manipulation and management.
Reusability: Implement Generic Algorithm.
Efficiency: Providing efficient algorithms for searching and sorting and manipulation. 
Key Interface in the collection framework:
The collection framework is primarily built around set of interfaces. The important ones.
1)Collection: The root interface for all other collection types.(सबका बाप है |)
2 List: Ordered collection allows storing duplicates elements(e.g. ArrayList,LinkedList).
3)Set: Collection that can't store duplicate elements(HashSet,TreeSet).
4)Queue: Collection designed for holding elements prior to processing (PriorityQueue, LinkedList when used as Queue.) (assume it like list following FIFO )
5)Deque: A double-ended queue that allows insertion and removal from both ends.(ArrayDeque) and pronounced(Deck).
6)Map: An interface represent collection of key-value pairs.(HashMap,TreeMap).
Collection Hierarchy:
The collection framework is organised into a hierarchy where the core interfaces are top ,and the specific implementations extend these interfaces.
Hierarchy :
				Iterable
                                   |
                                Collection
                                   |
------------------------------------------------------------------------------------------------------
|                                  |                                                                  |
List                               Set                                                            Queue
|                                  |                                                                 |   
ArrayList                        HashSet                                                     LinkedList
LinkedList                       LinkedHashSet                                            PriorityQueue
Vector				 TreeSet                                                          Deque
Stack 				 EnumSet						            |
CopyOnWriteArrayList       ConcurrentSkipListSet                                             ArrayDeque
                           	SortedSet                                                    LinkedList
                                CopyOnWriteArraySet                               ConcurrentLinkedDeque
                                                                                         BlockingQueue
                                                                                     ArrayBlockingQueue
                                                                                    LinkedBlockingQueue
                                                                                  PriorityBlockingQueue
                                                                                       SynchronousQueue
                                                                                   	     DelayQueue
                                                                                  ConcurrentLinkedQueue
Iterable: Its the root interfce if any class implements it then we can implement foreach loop on its object.
More or less its implementing Iterable part of java.lang package.
Collection Interface Overview:
Root Interface for java collection framework.
Basically defines group of objects known as elements.
Part of java.util package.
Parent Inteface extended by other collection interfaces like list, set and queue.
Since its an interface can't initiated directly but giving the blue print for methods to perform in the classes as methods.
Now Start :
List Interface:
Part of Java Util Package and sub-interface of collection framework.
Provides Ordered collection elements.(Known As Sequence).Can contain duplicate elements.
List is implemented by several classes like ArrayList, LinkedList, Vector and Stack.
Key Features of the List Interface:
Ordered Preservation
Indexed-Based Access
Allows Duplicates
First Implementation Class:
An arraylist is resizable arrayImplementation of the list interface. Unlike Arrays it have dynamic resize.
Implementation 
"D:\Professional\Student\CS\jmi\MCA\Summer_Break@2025\June_2025\8_Jun_2025\CollectionFramework\ArrayList\AL.java"
Internal Working:
Array list can grow and shrink its size by adding and removing elements. There is dynamic resizing copying elements of current array into new array.
Capacity vs Size:
Capacity means initial capacity i.e. by default it can store 10 elements.
Size of the array means the size of the array list before required to resize.
When adding elements to the arraylist.
When we add elements to the array list the following steps occur.
Check Capacity: Before adding elements array list check if there is enough space i.e. whether it needs to be resized.
Resize if necessary: If the internal array is full then new arraylist created 1.5 times of the current capacity and copy elements from old to new array.
Add the Elements: The new elements is then added to the internal array at the appropriate index and size is incremented.
Resizing the Array:
Initial Capacity: By default the initial capacity is 10. This means the internal array can hold 10 elements before it needed to grow.
Growth factor: When the initial array is full a, new array is created with size 1.5 times the old array. This growth factor balances memory and efficiency.
Copying Elements: When resizing the elements are copied from old to new one with time complexity of O(n) here n is the no of the elements of the array.
Removing the Elements:
Checks the Bound: The ArrayList first checks if the index is within the range.
Remove the Elements: The elements is removed and all the elements to right of the removed are shifted to one position left to fill the gap.
Reduce the size: The size is decremented by 1.
Overview :
Creating an ArrayList:
//Default constructor, creates an empty ArrayList with an initial capacity of 10.
ArrayList<String> l=new ArrayList<>();
// Creating an ArrayList with a specified initial capcity
ArrayList<String> listwithCapacity =new ArrayList<>(20);
// Creating an ArrayList from another Collection
List<String> anotherList=Arrays.asList("Apple","Banana","Orange");
ArrayList<String>listfromCollection=new ArrayList<>(anotherList);
Adding Elements:
ArrayList<String> list =new ArrayList<>();
// adding elements to the end of the list
list.add("Apple");
list.add("Banana");
// adding an element at a specific index
list.add(1,"Orange");
// Orange will be added at index 1,shifting Banana to index 2.
Accessing Elements:
String fruit=list.get(0);// Returns Apple
Modifying Elements:
list.set(1,"Grapes");// Replace "Orange with Grapes" 
Removing Elements
// Removing by Index
list.remove(1);// Removes the element at index 1("Grapes")
// Removing by value
list.remove("Apple");// Removes "Apple" from list.
Checking the elements from list
boolean hasApple =list.contains("Apple");// return true if "Apple" is present.
Converting to  array
String [] array=list.toArray(new String[0]);
Sorting an ArrayList
Collections.sort(list);// sorts in natural order;
Time Complexity :
Access by index(get) is O(1).
Adding an element is O(n) in the worst case when resizing the occurs.
Removing elements can be O(n) because it may involve shifting elements.
Iteration is O(n).
Comparator :
It is an interface use to compare two objects with three case
if there is -1 then first is smaller than second
if there is 0 then both are equal
if there is 1 then first is greater than second.
Now moving towards the LinkedList are:
The LinkedList class in java is part of collection framework and implements the List Interface. Unlike an Array List ,which uses a dynamic array to store the elements ,a LinkedList stores its elements as nodes in a doubly linked list. This provides different performance characteristics and usage scenarios compared to Array List.
A LinkedList is a linear data structure where each element is separate object called node. Each node contains two part.
Data-The value of stored in the node.
Pointers: Two pointers, one pointing to next node (next) and the other pointing to the previous node(previous). 
Performance Considerations:
Insertions and Deletions: LinkedList is better for frequent insertion and deletion in middle of list because it does not require shifting elements as in Array List.
Random Access: LinkedList has slower random access (get(int index)) compared to Array List because it has the traverse  the list from the beginning to reach the desired index.
Memory Overhead: LinkedList requires more than Array List because each node in linked list requires extra memory to store references to the next and previous nodes.
The time complexity of the linked list is O(n) for get Operation.
The time complexity of the Linked list is O(1) for 'addFirst' Operation because there is single operation and no shifting of the elements.
The time complexity of the Linked list is O(1) for 'addLast' Operation because there is single operation and no shifting of the elements.
The running command inside a folder CollectionFramework  then inside LinkedList is 
"java CollectionFramework.LinkedList.LL"
this command should be taken as reference to run the code.
LinkedList can also be referenced from its parent node.
List<String> ll =new LinkedList<>();
LinkedList behave as List.
But in future LinkedList will behave as Stack and Queue so its simply means its powerful class.
Now moving towards the implementation of Vector:
Vector:
A vector in java is a part of java.util package is legacy class implementing List Interface.
Introduced in jdk 1.0 before collection framework and but synchronised making it thread safe.
Its not recommended due to synchronization overhead most preferable in multi threading environment for thread safety purpose .But in normal cases ArrayList and LinkedList are more preferable. Since its thread safe synchronized it will take more memory and more processing time.
Key features:
Dynamic Array: Vector is a dynamic array, growing automatically where more elements are added than its capacity.
Synchronized: All methods in Vector are synchronized making it thread safe means multiple thread can work in without any safety issues i.e. no data corruption issue but have reduce performance in single thread system.
Legacy Classes: Present before the collection but since collection framework arrival it become a part then so its treated as Legacy class. ArrayList more preferable in single threaded system.
Resizing Mechanism: When current size exceeds it total capacity then its double its size by default.(increases by specific capacity increment if provided.)
Random Access: Similar ways to Arrays and Array List. Vector allows random access to elements making it efficient for accessing elements using an index.
Vector Constructor:
Vector(): Creates a vector of initial capacity 10.
Vector(int initialCapacity):Creates vector with specified initial capacity.
Vector(int initialCapacity,int capacityIncrement):Creates vector with an initial capacity and capacity increment (how much vector should grow when its capacity exceeded).
Vector(Collection<? extend E>c):Creates vector contains the elements of specified collection. 
Methods in Vector:
add(E e): Add an element at the end.
add(int index, E element):Reverses element at specific index.
get(int index):retrieves element at specific index. 
set(int index, E element): Replaces the element at the specific index.
remove (o object): Removes the first occurrence of the specified element.
remove (int index):Removes the element at the specified index.
size():Returns the number of elements in the vector.
isEmpty(): Checks if the vector is empty.
contains(Object o): Checks if the vector contains  the specified element.
clear(): removes all the elements from the vector.
Internal Implementation:
Internally vector uses an array to store its elements. The size of this array grows as needed as more elements are added. The default behavior is to double the size of the array when its runs out of space.
This resizing operation is a costly one ,as it requires copying the old elements to the new larger array.
Since vectors method are synchronized ensures only one thread can access at a time. Making it thread safe one can access vector at a time. Also increases the threaded environment because synchronization add locking and unlocking costs.
In modern Java Applications ArrayList is generally preferred over Vector while synchronization is not required.For thread safe collections, the CopyOnWriteArrayList or ConcurrentHashMap from java.util.concurrent package is often recommended.
Synchronization and Performance:
Since vector methods are synchronized ,it ensures that only one thread can access the vector at time. This makes it thread-safe but can introduce performance overhead in single-threaded enviornments because synchronization adds locking and unlocking costs. This is the reason behind preference of array list when synchronization is not needed. Thread safe collection are CopyOnWriteArrayList or ConcurrentHashMap from java.util.concurrent package is often recommended instead.
Summary :
Vector legacy synchronized collection class that implements the list interface. Behaves as dynamic array and grows when needed.Providing thread safety but performance cost in single threaded environment. In modern applications we generally prefer Arraylist or concurrent alternatives are preferred over Vector unless safety is an issue.
Now moving towards the Stack:
Stack mean stack of books ,cookies (यानी एक के ऊपर एक ) and to remove the elements from the stack we generally took from top of stack and taking out from top called its as Last in first out or (LIFO).
Since Stack extends Vector, it is synchronized making  it thread-safe. LIFO Structure :Stack follows the Last-in-first-out(LIFO) principle, where last element added is first one to removed.
Inheritance: Stack is subclass of vector, which means it inherits all features of dynamic array but is constrained by stack's LIFO nature.
LinkedList can only be use as Stack only if its double ended linked list.
Now move towards the next part CopyOnWriteArrayList:
CopyOnWrite means whenever write operation like adding or removing element instead of adding or removing an element instead directly modifying the existing list a new copy of list is created and modification is applied to that copy. This ensure that threads reading the list while its being modified are unaffected.
The code is in the files.
Map:
In java a Map is an object that maps keys to values.It cannot contains duplicate key values and each key can map to atmost one value. Think of its a dictionary where you look up a word (key)to find its definition(value).
Map Does not Extend collection interface.
Key Characterstics :
Key-Value Pairs: Each entry in a Map consists of a key and a value.
Unique Keys: No two entries can have the same value.
One value per key: Each key maps to single value.
Order: Some implementations maintain insertion order.
(LinkedHashMap),Natural Order(TreeMap),or no order(HashMap).
First implementation is HashMap
Key Characteristics :
Unordered: Does not maintain any order of elements.
Allows null keys and Values: Can have one null key and multiple null values.
Not Synchronized: Not thread-Safe :requires external.
Synchronization if used in multithreaded context.
Performance: Offers constant time performance (O(1)) for basic operations like get and put assuming the hash function disperses elements properly.
Internal Structure of HashMap:
HashMap has 4 basic components:
1)Key: The identifier use to retrieve the value. 
2)Value: The data associated with the key.
3)Bucket: A place where key-where pairs are stored. Think of buckets as cells in a list(array).
4)Hash function: Converts a key into an index (Bucket location) Storage.
A hash function is an algorithm that takes an input (or "key") and returns a fixed-size string of bytes ,typically a numerical value. The output is known as has code, hash value or simply hash. The primary purpose of hash function is to map data of arbitrary size to data of fixed size.
Deterministic: The same input will always produce the same output.
Fixed Output Size: Regardless of the input size the hash code has a consistent size(e.g., 32-bit,64-bit).
Efficient Computation: The hash function should compute the hash quickly.
How data is Stored in HashMap.
Step1) Hashing the key:
First the key is passed through a hash function to generate a unique hash code (an integer number). This hash code helps determine where the key value pair will be stored in the array(called a "bucket array").
Step2) Calculating the index: The hash code is then used to calculate an index in the array(bucket location) using int index =hashCode % arraySize;
The index decides which bucket will hold this key-value pair. For example, if the array size is 16,the key's hash code will be divided by 16 and the remainder will be the index.
Step3)Storing in the bucket.
The key-value pair is stored in the bucket at the calculated index. Each bucket can hold multiple key-value pairs.
(this is called a collision handling mechanism, discussed later).
e.g. 	map.put("apple",50).
*)"apple" is the key.
*)50 is the value.
*)The hash code of apple is calculated.
*)The index is found using the hash code.
*) The pair ("apple",50)is stored in the corresponding bucket.
How HashMap Retrieves Data
When we call get(key), the HashMap follow these steps:
Hashing the key: Similar to insertion, the key is hashed using the same hash function	to calculate it hash code. 
Finding the Index: The hash code is used to find the index of the bucket where the key -value pair is stored.
Searching in the Bucket	:Once the correct bucket is found, it checks for the key in that bucket .If it finds the key, it returns the associated value.
1)HashCode
2)index
There arise 2 condition?
1)what type of data is stored in array?
2) Why search?
Ans) Input -> Hashfunction ->Output.
When different input pair has same output hash code then this type of condition is called Collision.
Handling collisions 
Since different keys can generate same index (called collision) HashMap uses technique to handle this situation. Java's Hashmap uses LinkedLists( or balanced trees after java 8)for this.
If multiple key-value pairs map to same bucket ,they are stored in a linked list inside the bucket.
When a key-value pair is retrieved ,the HashMap traverses the linked list ,checking each key unit it finds a match.
While searching in the linkedlist the value the time complexity is O(n) and 	while searching it in Balanced Binary search tree(RB Tree).
HashMap Resizing (Rehashing)
HashMap has an internal array size which by default is 16. When number of elments(key-value pairs) grows and exceeds  a certain load factor(default is 0.75),HashMap automatically resizes the array to hold more data.This process is called rehashing.
The default size of the array is 16 so when	more then 12 elements (16*0.75) are inserted ,the hasHmap will resize.
During Rehashing.
The array size is doubled. 
1) All existing  entries  are rehashed(i.e. their positions are recalculated) and placed into the new array.
This ensures the HashMap continues to perform efficiently even as more data is inserted.
Time Complexity :
 HashMap provide constant time O(1)  performance for basic operations like put() and get()(assuming no collision).
However, if there are many collisions, and many entries are stored in the same bucket ,the performance can degrade to O(n), where n is the number of the elements in that bucket.
But after java8 ,if there are too many elements in a bucket ,HashMap switches to a balanced tree instead of a linked list to ensure the better performance O(logn).
Suppose we want to store information about the number of fruits in a store. Here's what we want to store.
Fruit	Quantity
Apple	50
Banana	30
Orange	80
Grape	20
HashMap<String,Integer> fruitMap = new HashMap<>();
Let add the key value pairs one by one.
fruitMap.put("Apple",50);
Internal Process 
The key "Apple" is hashed using its hash code().Let's Assume "Apple" generates a hashCode of 10832233(this is just an example value.)
The hashCode is used to calculate the index in the internal array (bucket array).Let's say the array size is initially 16.
index =hashCode%arraySize;
index=10832233 %16=9;
This means "Apple" will be stored in bucket 9.
fruitMap.put("Banana",30);
index =13942244 %16=4;
fruitMap.put("Orange",80);
index=19332414 %16=14;
fruitMap.put("Grape",20);
index=58734 %16=14;
So there is collision between Orange and Grape
Resolving Collision:
Since "Orange" is already stored in bucket14,the HashMap Handles the collision by adding "Grape" to the linked list in bucket14.
Now,bucket14 contains two entries:("Orange",80) and ("Grape",20).
HashMap Structure (Array of Buckets,size:16)
Index |Bucket(key-value Pairs)
--------------------------------------------------------------------
0         |
1         |
2         |
3         |
4         |("Banana",30)
5         |
6         |
7         |
8         |
9         |("Apple",50)
10        |       
11        |
12        |
13        |
14        |("Orange",80)->("Grape",20) //Collision: stored in a linked list
15        |
In java treefiy threshold is 8.
map.put("orange",80);
map.put("Grape",20);
The checking is done using equals method and hash code as any Integer, String or Custom Class is having object so uses hash code and equals method both technique compares the object. Hash code is generated by the memory address.
Equals method checks the reference address. 
Time Complexity:
Operation | Average-Case(Time Complexity)|Worst-Case(Time Complexity)|Explanation
-------------------------------------------------------------------------------------------------------
put(key)  | O(1)			 |O(logn)		     |Insert a key-value pair. Average:
	  |				 |			     |Constant time due to direct 	  |			         |			     |bucket access. Worst-Case(O(logn)            	  |        			 |			     |when buckets converts to a Red 	  |				 |			     |Black Tree after exceeding  	  |                              |                           |collision threshold. 
-------------------------------------------------------------------------------------------------------
get(key)  |O(1)                          |O(logn)                    |Retrieves the value associated                   	  |				 | 			     |with a key. Average :Constant            	  |				 |			     |time via direct bucket access. 	  |			         |			     |Worst Case: O(logn)when searching 	  |				 |			     |within Terrified tree.
-------------------------------------------------------------------------------------------------------remove(key)| O(1)			 |O(logn)		     |Removes the key-value-pair 	   |			         |			     |associated with a 		   |				 |		             |key. Average: Constant time with 	   |				 |			     |direct access. Worst-Case O(logn) 	   | 				 |			     |when removing from a treeified 	   |				 |			     |bucket.
-----------------------------------------------------------------------------------------------------
contains key |O(1)                       |O(logn)                    |Checks if a key exits in 	the (key)        |			         |			     |map. Average constant time via 	     |			         |			     |direct bucket access worst   	     |			         |			     |case: O(logn)when searching   	     |			         |			     |within treeified bucket.
------------------------------------------------------------------------------------------------------
contains value| O(n)                     | O(n)                      | Checks if a value exist in the  (value)	      |			         |			     |map. Both average and worst case 	      |				 |			     |are linear time since it may need      	      |			         |			     |to traverse all entries.
------------------------------------------------------------------------------------------------------
size()	      | O(1) 			 |O(1)                       |Returns the number of key-value 	      |			         |			     |pairs. Both the average and
	      |				 |			     |worst-case are constant time as    	      | 			 |		     	     |the size is maintained in the 	      |				 |			     |separate field.
------------------------------------------------------------------------------------------------------                      
 LinkedHashMap uses double linked list which is little slower consumes more space then hashMap but overall has time complexity i.e. of O(1) as it's subclass of hash map.
LinkedList HashMap is not thread safe just like HashMap.
WeakHashMap: Weakly referencing memory address i.e. easily collected by garbage collection done by jvm.
Since the String literals are stored in String pool which are automatically strongly referenced into the memory so hold by jvm during the complete cycle of the program.
IdentityHashMap:if(node.key.equals(key)){//key matches, return the values.
return node.value;} IT uses its own hashcode inside the class. It does not use the hash code of the defined class its uses its hash code using the reference address. So it does not matter whatever the string is same or not whether the hash code of the items are same because it works on the reference address of the items which is always going to different so it allows the different hashcode to be generated.
Comparator is used to compare to when we have to write the custom logic. When we have to sort multiple fields we use Comparator. it has compare method.
While the comparable class has compareTO function uses to compare in according to -1 and 1 and 0 
if they are equal then equal to zero.
if one is greater then second then -1.
if second is greater then one then 1.
Then move to SortedMap:
SortedMap is an interface that extends Map and guarantees that the entries are sorted based on the keys, either in their natural ordering or by a specified Comparator.
TreeMap is the implementation class  of the Sorted Map.In treeMap there is RedBlack tree. There is sorted time Complexity(O(logn))
NavigableMap extends SortedMap, providing more powerful navigation options such as finding the closest matching key or retrieving the map in reverse order.
In sorted map we find the range and in navigable map we find the closest pair match.
Now we are moving towards the hashtable.
HashTable : It was existing in Java 1.0 even collection framework not existed then also the Hashtable existed in the java world now the fact its extending the Map Class.
Hashtable is synchronized no null key or value.Legacy Class ,ConcurrentHashMap replaces HashTable.Slower than HashMap due to overhead.HashMap bucket system is utilised in HashTable.
It uses only the Linked List in case of Collision.HashTable is thread safe and every method is synchronized.
Now moving towards the Concurrent HashMap which is fullifilling the drawback of concurrency of HashTable.
Concurrent HashMap:It extends the Concurrent Map.And Concurrent Map extends Map.In java 7 it uses segment based locking.By default 16 segments which is non other then smaller hashmap.Only the segment being  written or read is being locked.In read operation does not require locking unless there is writing operation happening on the same segment.Write Operations will lock the segment.This is mechanims in Java7.In java 8 there is no segmentation becuase since the size is 16 so there is no scalablity. So it  uses compare and swap approach no locking.Except for resizing or collision condition then there is locking exist on the Concurrent HashMap then in that locking exist.  
Suppose Thread A last saw --> x=45
and Thread A work--> x to 50.
if x is still 45,then change it to 50 else don't change and retry.
put-->index.
Map which is sorted and thread safe.
InConcurrent HashMap there is incremental resizing.
ConcurrentSkipListMap:Data stored in DataStructure stored in SkipList,ThreadSafe TreeMap.
In real list 1,2,3,4,5,6,7,8,9 is a data Strucutre. But Skiplist is probabilistic data structure that allows for efficient search,insertion and deletion operations.It is similar to sorted linkedList but with the multiple layers that "skip over portions of the list to provide faster access to elements.The data is sorted and the data is lies in multiple which leads to fast access. In 1,2,3,4,5,6,7,8,9
Like suppose in layer 1:1,2,3,4,5,6,7,8,9
layer 2:1,3,5,7,9
layer 3:1,5,9
Suppose we have to search 2
3)1------->5------9
2)1--->3---5----7---9
1)1-2-3 so in this way it seach in all levels then reduce the searching time. Here the time complexity is of logn. There is no strictness and everything is just random and probabilistic in nature. We use  skip list because to make things simpler.
Concurrent SkipList Map stores in skip-list data structure which is (thread safe and tree map)
For sorting things uses TreeMap
Closest entry first entry and last entry then use Navigable Map is just an interface.
If you want concurrency then use ConcurrentHashMap is concurrent version of hashMap.
If you want sorted concurrency then use ConcurrentSkipListMap.We can use it in multithreaded environment.
Now moving towards the EnumMap.	  
Now since we have not drawn the Map Hierarchy now just drawing.
  Map(Separate Interface):
-------------------------------------------------------------
|                       |                     |             |
Hash               SortedMap             ConcurrentMap     EnumMap
--------------    ----------   ------------------------------------
|            |         |                      |             
HashMap  HashTable    TreeMap     ConcurrentHashMap
|    |   (legacy)   NavigableMap-> ConcurrentSkipListMap	
LinkedHashMap
WeakHashMap
IdentityHashMap: 
EnumMap: EnumMap has same size array. There is no hashing since order is maintained by the Enum index. The ordinal/index is used.["_Unique_", "_Dream_","_Common_","_Chill_","_Business_","_South_Korea_","_Photoshop_","_Networking_","_BingeWatch_","_RatanTata_"].Faster then HashMap.It is Memory Efficient.
Now moving Immutable Map:Map is that map which cannot be modified once its intiated now Map is completed.
Now moving towards the Set
Overview:Set is a collection that cannot contain duplicate elements.Since it is based upon the principle of hashMap so searching time complexity is O(1).Faster Operation.Like there were implementation of Map like HashMap, LinkedHashMap,TreeMap,EnumMap.Similarly Set has implementation like HashSet,LinkedHashSet,TreeSet,EnumSet.
CopyOnWriteArraySet: Thread safe and uses CopyOnWriteArraySet.No Duplicate elements.Iterators Do not reflect modifications.if read and iterate  intensive thing is present then we will use CopyOnWriteArraySet because it utilising the efficient use of memory for reading and iterating.
Frequent Read and Writes we will use ConcurrentSkipListSet.
Now moving towards the next topic Queue.
The Last part of the CollectionFrameWork.
Queue:
A data structure that Works on the FIFO(Firt In First Out) principle.(जो पहले 	आया था वही पहले जायगा )r.
Main Characterstics:
Elements are added at the end and removed from the front.(पीछे से घुसना और आगे से निकालना) is called Queue.
Inserting /(डालने को )in queue at tail is known as Enqueue. The method corresponding to enqueue is known as add in java. There is additional method corresponding to add i.e. called offer.
Deleting /(निकालने को) from queue at head is known as Dequeue. The method corresponding to dequeue is known as remove in java. There is additional method corresponding to remove i.e. called poll.
Since LinkedList can acts as queue but there are different methods which increase the complexity and to reduce the complexity java introduced a data structure called queue.
Returning head in queue is called peek operation. The method corresponding to the peek is peek method. There is an additional method corresponding to peek which is called element.
These corresponding additional method have same and also have difference which are going to be analysed through our code.
Now moving towards next Implementation:
Priority Queue:s Its part of the Queue. Orders elements based upon their natural ordering (for primitives lowest first).We can use custom comparator for customized ordering. The biggest priority is given to the element which is placed at the head. Eg. Dr's Relatives. Does not allow null elements.
 Its an interface and the implementation class are as follows:- Linked List, Priority Queue. 
Internal Working:
Priority Queue is implemented as a min-heap by default(for natural ordering).
Min heap is Binary Tree.
Now moving towards the Deque.
Deque: Double Ended Queue. Allows Insertion and removal of elements from both ends. Versatile then regular queues and stacks because they support all the operations of both.
Insertion Methods:
addFirst(E e):Inserts the specified element at the front.
addLast(E e):Inserts the specified element at the end.
offersFirst(E e):Inserts the specified element at the front if possible.
offersLast(E e):Inserts the specified element at the end if possible.
Removal Methods:
removeFirst():Retrieves and the first element.
removeLast():Retrieves and removes the last element.
pollFirst():Retrieves and removes the first element or returns null if empty.
pollLast():Retrieves and removes the last element or returns null if empty.
Examination Methods:
getFirst():Retrieves ,but does not remove ,the first element. IT will throw exception if null
getLast():Retrieves,but does not remove ,the last element.IT will throw exception if null
peekFirst():Retrieves ,but does not remove , the first element or returns null if empty.
peekLast():Retrieves ,but does not remove ,the last element or returns null if empty.
Now it also follows the Stack methods as follows:
push(E e):Adds an element at the front(equivalent to addFirst(E e)).
pop(E e):Removes and returns the first element(equivalent to  removeFirst(E e)).
Now the story time finished up moving forward to the code:
Deque implemented by ArrayDeque is resizable that is it does not have any capacity restriction but it grows as necessary to support usage not thread safe, null elements are prohibited faster then stack and queue when use as stack and queue respectively.
The term wrap around introduced when tail is not shifted inside the circular queue and its move around the front. If size is full i.e. head=full then size becomes double.
Now move forward towards the blocking queue.
BlockingQueue: Its thread safe queue. Its does wait for queue to become non empty/space.
Purpose: Simplify Concurrency problems like producer-consumer. Standard queue->immediately.
Empty-->remove(no waiting).full-->add(no waiting).
Now talking about the Blocking queue
put->blocks the queue is full until space becomes available.
take-> blocks if the queue is empty until an element becomes available.
offer->waits for the space to become available up to the specified timeout. Now again the story of blocking queue is finished up and now moving towards the code.
Now moving towards the LinkedBlockingQueue:
Now moving towards the PrioritBlockingQueue: 
Now moving towards the SynchronousBlockingQueue:
Now moving towards the 	DelayQueue: Thread-safe unbounded blocking queue. Elements can only be taken from the queue when their delay has expired. Useful for scheduling tasks to be executed after a certain delay.
Internally use the priority queue.
ConcurrentLinkeQueue: When we do not want to block the threads and access them with the thread safety and want to access the queue this is condition for generating the non blocking thread safe queue come into picture known as ConcurrentLinkedQueue come into picture. An implementation of the queue interface that supports lock-free, thread-safe operations. It will have high throughput system.
Lock-free and thread safe which we studied in HashMap using the compare and swap technique.
Now moving forward to ConcurrentLinkedDeque:
It is non blocking thread safe queue.
Now the collection framework is over.
Now study Iterator.
It is an interface which has different methods:
1) hasNext
2) next
Iterator gives the power to iterate i.e. while executing the loop it is also removing the element.
So this Ends up the Collection framework.
 
							


  


 
 
 















