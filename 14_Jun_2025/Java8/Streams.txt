Streams:
Java8:
Began to write concise code ,minimal code. It introduced functional programming in java. It also introduced lambda expression, streams, date and time API.
Method Reference ,Constructor Reference, Functional Interface.
Lambda Expression:
Anonymous Function: no name, no return type ,no access modifie
(()->{
            System.out.println("नमस्ते ");  
        }); this expression is called lambda expression
The interface those who have single abstract function inside it is known as Functional interface.

interface MathOperation {
    int operate(int a, int b);
} 
Thread t2 = new Thread(() -> {
            System.out.println("नमस्ते ");
        });
        MathOperation sm = (a, b) -> a + b;// lambda expression
        MathOperation dm = (a, b) -> a - b;
        int r = sm.operate(1, 2);
        System.out.println(r);
Now moving towards the next topic Predicate 
Predicate: There is only one abstract method i.e. Test. It just holds the condition. So basically storing the condition inside the variable .
 Now moving to the new concepts that is born in Java8 i.e.
Function: Function interface there is functional interface which has an abstract method to apply.
Consumer : Function interface which have abstract method of accept. It just consumes the thing but it will not return anything but it will accept the data types passed.
Supplier: It only supplies thing never takes anything from anyone.
These above mentioned only take single argument
But there are also Streams which take two argument termed as BiFunction, BiConsumer, BiPredicate.
Method Reference : Use method without invoking and in place of lambda expression. When we are giving method as parameter then this type of programming is called method reference or Functional Programming.
It shortcut for lambda expression.
Constructor Reference:(Phone::new) this line is called constructor referencing .
 Streams : Sequence of elements which supports various operations supports functional and declarative programming. Streams is an interface.
So the basic structure in the Stream data structure is
Source Intermediate Operations and Terminal Operations.
There are two things stateful and stateless operation
Stateful: When there is an operation which is dependent upon the whole set of elements is called stateful operation.
Stateless :When there is an operation which is independent upon the whole set of elements is called stateless i.e. while doing the operation they are caring about the single elements in operations.
Parallel Stream
It is a stream which enable parallel processing allowing multiple threads to work simultaneously.
Most effective for cpu intensive or large datasets share tasks are independent.
They  may add overhead for simple tasks or small datasets degrading the overall performance of the system.
Collector :responsibility to collect summarise choose the right collector.
Now moving forward to primitive streams

Ask deepseek for practice question on collectors.